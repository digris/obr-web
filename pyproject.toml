[tool.poetry]
name = "obr-web"
version = "0.1.0"
description = "openbroadcast.ch - next"
authors = ["Jonas Ohrstrom <jonas.ohrstrom@digris.ch>"]
license = "MIT"

packages = [
    {include="config", from="."},
    {include="obr_core", from="."},
]

[tool.poetry.dependencies]
python = ">=3.11, <3.13"
Django = "^5.0"
google-cloud-secret-manager = "^2.11.1"
google-auth = "^2.6.6"
django-environ = "^0.10"
django-storages = {extras = ["google"], version = "^1.11.1"}
djangorestframework = "^3.14.0"
django-settings-export = "^1.2.1"
django-filter = "^23.2"
Pillow = "^9.0.1"
# django-admin-sortable2 = "^1.0.2"
django-cleanup = "^7.0"
drf-flex-fields = "^1.0.0"
django-request-logging = "^0.7.3"
google-cloud-logging = "^3.1.2"
social-auth-app-django = "^5"
Hypercorn = {version = "^0.17.3", extras = ["h3"]}
click = "^8.0.0"
stripe = "12.2"
colorthief = "^0.2.1"
django-taggit = "^4.0"
drf-spectacular = "^0.26.2"
filetype = "^1.0.7"
djangorestframework-camel-case = "^1.2.0"
sentry-sdk = {version = "^1.25", extras = ["django"]}
Markdown = "^3.3.4"
setoptconf = "^0.3.0"
whitenoise = "^6.2.0"
bleach = "^6.0"
django-countries = "~7.6.1"
#grpcio = "<1.52.0"
django-qsstats-magic = "^1.1.0"
pyembed-markdown = "^1.1.0"
slack-sdk = "^3.17.0"
google-api-core = "^2.8.1"
django-modeltranslation = "^0.18.2"
djangorestframework-simplejwt = "^5.3.1"
sendgrid = "^6.9.7"
django-admin-interface = "^0.26"
django-admin-sortable2 = "^2.1.4"
progress = "^1.6"
python-dateutil = "^2.8.2"
django-tree-queries = "^0.14.0"
google-cloud-bigquery = "^3.9.0"
ua-parser = "^0.16.1"
grpcio = "~1.64.1"
psycopg = {extras = ["binary", "pool"], version = "^3.1.9"}
mailchimp-marketing = "^3.0.80"
google-cloud-pubsub = "^2.18.4"
pytz = "^2024.1"
geoip2 = "^4.8.0"
funcy = "^2.0"
elasticsearch = "^8.15.1"
opensearch-py = "^2.7.1"
qrcode = {extras = ["pil"], version = "^8.0"}
django-unfold = "0.59.0"

[tool.poetry.group.dev.dependencies]
django-debug-toolbar = "*"
django-extensions = "*"
pre-commit = "*"
pygtail = "*"
pylint = "*"
pylint-django = "*"
werkzeug = "*"
pytest-django = "*"
pytest-cov = "*"
django-querycount = "*"
Faker = "^7.0.1"
freezegun = "^1.1.0"
mixer = "^7.2.0"
selenium = "^4.0.0"
libfaketime = "^2.0.0"
black = "^25.1"
python-semantic-release = "^7.27.0"
ruff = "^0.0.260"
isort = "^5.12.0"
ipython = "^8.25.0"
ansible = "^11.2.0"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.isort]
profile = "black"
force_single_line = false
default_section = "THIRDPARTY"
known_first_party = "core"
known_django = "django"
sections = "FUTURE,STDLIB,DJANGO,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"

[tool.semantic_release]
version_variable = [
    "config/__init__.py:__version__",
    "pyproject.toml:^version",
]
branch = "main"
upload_to_pypi = false
upload_to_release = false
build_command = "pip install poetry && poetry build"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds config.settings.test"  # term:skip-covered / term-missing
python_files = ["test_*.py"]
markers = [
    "integration: marks tests as slow (deselect with '-m \"not integration\"')",
    "e2e: marks tests as slow (deselect with '-m \"not e2e\"')",
]
filterwarnings = [
    "ignore:::pkg_resources",
    "ignore:::standard_library",
    "ignore:::html5lib",
#    "ignore::django.utils.deprecation.RemovedInDjango50Warning:django",
    "ignore::django.utils.deprecation.RemovedInDjango51Warning:django",
    "ignore::DeprecationWarning:future",
    "ignore::DeprecationWarning:google",
]

[tool.mypy]
plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]

[mypy.plugins.django-stubs]
django_settings_module = "config.settings.test"

[tool.ruff]
select = [
    "E",   # pycodestyle (error)
    "W",   # pycodestyle (warning)
    "F",   # Pyflakes
    "C90", # mccabe
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DJ",  # flake8-django
    "PIE", # flake8-pie
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
#    "PTH", # flake8-use-pathlib
    "ERA",
#    "PLR",
    "PLW",
    "TRY", # tryceratops
]

extend-exclude = [
    "tests",
    "migrations",
    "config/settings",
    "obr_core/sync/management",
]

extend-ignore = [
    "E501",
    "S101", # Use of `assert` detected
    "FBT002", # NOTE: check possible implications
    "A002",
    "A003",
    "RET504",
    "TID252", # NOTE: check possible implications
    "ARG", # NOTE: migrate # pylint: disable=unused-argument
    "PLW2901", # NOTE: check possible implications
    "TRY", # NOTE: check possible implications
    "S608", # NOTE: check possible implications
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py311"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 8
